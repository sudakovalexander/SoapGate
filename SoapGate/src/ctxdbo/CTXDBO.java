package ctxdbo;

import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;
import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4.redhat-1
 * 2017-01-11T14:20:18.558+03:00
 * Generated source version: 3.1.4.redhat-1
 * 
 */
// http://192.168.77.109:9763/services/CTX_DBO_NEW?wsdl - work 
// http://192.168.87.109:9763/services/CTX_DBO_NEW?wsdl - test

@WebServiceClient(name = "CTX_DBO_NEW", 
                  wsdlLocation = "",
                  targetNamespace = "http://ws.wso2.org/dataservice") 
public class CTXDBO extends Service {
//@javax.ws.rs.core.Context
//	ServletContext context;
//	@Resource 	private WebServiceContext context;
	@Resource ServletContext context;
	 	

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.wso2.org/dataservice", "CTX_DBO_NEW");
    public final static QName SecureSOAP11Endpoint = new QName("http://ws.wso2.org/dataservice", "SecureSOAP11Endpoint");
    public final static QName SecureHTTPEndpoint = new QName("http://ws.wso2.org/dataservice", "SecureHTTPEndpoint");
    public final static QName SOAP11Endpoint = new QName("http://ws.wso2.org/dataservice", "SOAP11Endpoint");
    public final static QName SecureSOAP12Endpoint = new QName("http://ws.wso2.org/dataservice", "SecureSOAP12Endpoint");
    public final static QName HTTPEndpoint = new QName("http://ws.wso2.org/dataservice", "HTTPEndpoint");
    public final static QName SOAP12Endpoint = new QName("http://ws.wso2.org/dataservice", "SOAP12Endpoint");
    static {
    /*
    	
    	//System.out.println(context.getRealPath(""));
    	
		     	try{
    		File f=new File("/opt/soapgate.xml");
    		FileInputStream fis= new FileInputStream(f);
    		//InputStream fis = servletContext.getResourceAsStream("/WEB-INF/soapgate.xml");
			//InputStream fis = class.getClass().getClassLoader().getResourceAsStream("/WEB-INF/soapgate.xml");
			//this.context.getRealPath("");
			//InputStream fis = Application.class.getResourceAsStream("/WEB-INF/soapgate.xml");
    		Properties p=new Properties();
			p.loadFromXML(fis);
    		fis.close();

    		Enumeration enKeys=p.keys();
    		while (enKeys.hasMoreElements()){
    			String key=(String) enKeys.nextElement();
    			String value=p.getProperty(key);
    			System.out.println(key+": "+value);
    		}
    	} catch (Exception e){
    		e.printStackTrace();
    	}
    	*/
    	URL url = null;
    	System.out.println("CTXDBO init");
    	try {
    		String localIP=InetAddress.getLocalHost().getHostAddress();
			
			if (localIP.equals("10.1.204.113"))
				url = new URL("http://192.168.87.109:9763/services/CTX_DBO_NEW?wsdl");
			if (localIP.equals("10.1.204.19"))
				url = new URL("http://192.168.77.109:9763/services/CTX_DBO_NEW?wsdl");
			System.out.println("localIP: "+localIP+"; WSDL: "+url.toString());
				
		} catch (UnknownHostException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
   	 	catch (MalformedURLException e) {
             java.util.logging.Logger.getLogger(CTXDBO.class.getName())
                 .log(java.util.logging.Level.INFO, 
                      "Can not initialize the default wsdl from {0}", url.toString());
        }
        
        WSDL_LOCATION = url;
        
    }

    public CTXDBO(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CTXDBO(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CTXDBO() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public CTXDBO(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CTXDBO(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CTXDBO(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SecureSOAP11Endpoint")
    public CTXDBOPortType getSecureSOAP11Endpoint() {
        return super.getPort(SecureSOAP11Endpoint, CTXDBOPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SecureSOAP11Endpoint")
    public CTXDBOPortType getSecureSOAP11Endpoint(WebServiceFeature... features) {
        return super.getPort(SecureSOAP11Endpoint, CTXDBOPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SecureHTTPEndpoint")
    public CTXDBOPortType getSecureHTTPEndpoint() {
        return super.getPort(SecureHTTPEndpoint, CTXDBOPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SecureHTTPEndpoint")
    public CTXDBOPortType getSecureHTTPEndpoint(WebServiceFeature... features) {
        return super.getPort(SecureHTTPEndpoint, CTXDBOPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SOAP11Endpoint")
    public CTXDBOPortType getSOAP11Endpoint() {
        return super.getPort(SOAP11Endpoint, CTXDBOPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SOAP11Endpoint")
    public CTXDBOPortType getSOAP11Endpoint(WebServiceFeature... features) {
        return super.getPort(SOAP11Endpoint, CTXDBOPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SecureSOAP12Endpoint")
    public CTXDBOPortType getSecureSOAP12Endpoint() {
        return super.getPort(SecureSOAP12Endpoint, CTXDBOPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SecureSOAP12Endpoint")
    public CTXDBOPortType getSecureSOAP12Endpoint(WebServiceFeature... features) {
        return super.getPort(SecureSOAP12Endpoint, CTXDBOPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "HTTPEndpoint")
    public CTXDBOPortType getHTTPEndpoint() {
        return super.getPort(HTTPEndpoint, CTXDBOPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "HTTPEndpoint")
    public CTXDBOPortType getHTTPEndpoint(WebServiceFeature... features) {
        return super.getPort(HTTPEndpoint, CTXDBOPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SOAP12Endpoint")
    public CTXDBOPortType getSOAP12Endpoint() {
        return super.getPort(SOAP12Endpoint, CTXDBOPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CTXDBOPortType
     */
    @WebEndpoint(name = "SOAP12Endpoint")
    public CTXDBOPortType getSOAP12Endpoint(WebServiceFeature... features) {
        return super.getPort(SOAP12Endpoint, CTXDBOPortType.class, features);
    }

}

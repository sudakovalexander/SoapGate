package com.custsystems.integration.abs.absinterface;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4.redhat-1
 * 2017-07-07T13:25:08.582+03:00
 * Generated source version: 3.1.4.redhat-1
 * 
 */
@WebServiceClient(name = "ABSInterfaceService", 
                  wsdlLocation = "file:/root/workspace2/SoapGate/resources/ABSInterface.wsdl",
                  targetNamespace = "http://custsystems.com/integration/abs/ABSInterface") 
public class ABSInterfaceService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://custsystems.com/integration/abs/ABSInterface", "ABSInterfaceService");
    public final static QName ABSInterfacePort = new QName("http://custsystems.com/integration/abs/ABSInterface", "ABSInterfacePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/root/workspace2/SoapGate/resources/ABSInterface.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ABSInterfaceService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/root/workspace2/SoapGate/resources/ABSInterface.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ABSInterfaceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ABSInterfaceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ABSInterfaceService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public ABSInterfaceService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ABSInterfaceService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ABSInterfaceService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns ABSInterfacePortType
     */
    @WebEndpoint(name = "ABSInterfacePort")
    public ABSInterfacePortType getABSInterfacePort() {
        return super.getPort(ABSInterfacePort, ABSInterfacePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ABSInterfacePortType
     */
    @WebEndpoint(name = "ABSInterfacePort")
    public ABSInterfacePortType getABSInterfacePort(WebServiceFeature... features) {
        return super.getPort(ABSInterfacePort, ABSInterfacePortType.class, features);
    }

}

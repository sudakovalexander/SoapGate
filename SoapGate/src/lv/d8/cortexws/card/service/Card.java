package lv.d8.cortexws.card.service;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4.redhat-1
 * 2017-07-04T10:25:43.922+03:00
 * Generated source version: 3.1.4.redhat-1
 * 
 */
@WebServiceClient(name = "Card", 
                  wsdlLocation = "http://192.168.77.159:8080/cortexws-dev/services/Card?wsdl",
                  targetNamespace = "http://service.card.cortexws.d8.lv") 
public class Card extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.card.cortexws.d8.lv", "Card");
    public final static QName CardHttpport = new QName("http://service.card.cortexws.d8.lv", "CardHttpport");
    public final static QName CardSOAP12PortHttp = new QName("http://service.card.cortexws.d8.lv", "CardSOAP12port_http");
    public final static QName CardSOAP11PortHttp = new QName("http://service.card.cortexws.d8.lv", "CardSOAP11port_http");
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.77.159:8080/cortexws-dev/services/Card?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Card.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://192.168.77.159:8080/cortexws-dev/services/Card?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Card(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Card(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Card() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Card(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Card(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Card(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns CardPortType
     */
    @WebEndpoint(name = "CardHttpport")
    public CardPortType getCardHttpport() {
        return super.getPort(CardHttpport, CardPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CardPortType
     */
    @WebEndpoint(name = "CardHttpport")
    public CardPortType getCardHttpport(WebServiceFeature... features) {
        return super.getPort(CardHttpport, CardPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CardPortType
     */
    @WebEndpoint(name = "CardSOAP12port_http")
    public CardPortType getCardSOAP12PortHttp() {
        return super.getPort(CardSOAP12PortHttp, CardPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CardPortType
     */
    @WebEndpoint(name = "CardSOAP12port_http")
    public CardPortType getCardSOAP12PortHttp(WebServiceFeature... features) {
        return super.getPort(CardSOAP12PortHttp, CardPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CardPortType
     */
    @WebEndpoint(name = "CardSOAP11port_http")
    public CardPortType getCardSOAP11PortHttp() {
        return super.getPort(CardSOAP11PortHttp, CardPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CardPortType
     */
    @WebEndpoint(name = "CardSOAP11port_http")
    public CardPortType getCardSOAP11PortHttp(WebServiceFeature... features) {
        return super.getPort(CardSOAP11PortHttp, CardPortType.class, features);
    }

}

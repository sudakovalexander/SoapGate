package lv.d8.cortexws.currency.service;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4.redhat-1
 * 2016-12-08T13:02:17.757+03:00
 * Generated source version: 3.1.4.redhat-1
 * 
 */
@WebServiceClient(name = "Currency", 
                  wsdlLocation = "http://10.1.204.19:9765/cortexws-dev/services/Currency?wsdl",
                  targetNamespace = "http://service.currency.cortexws.d8.lv") 
public class Currency extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.currency.cortexws.d8.lv", "Currency");
    public final static QName CurrencySOAP11PortHttp = new QName("http://service.currency.cortexws.d8.lv", "CurrencySOAP11port_http");
    public final static QName CurrencySOAP12PortHttp = new QName("http://service.currency.cortexws.d8.lv", "CurrencySOAP12port_http");
    public final static QName CurrencyHttpport = new QName("http://service.currency.cortexws.d8.lv", "CurrencyHttpport");
    static {
        URL url = null;
        try {
            url = new URL("http://10.1.204.19:9765/cortexws-dev/services/Currency?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Currency.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://10.1.204.19:9765/cortexws-dev/services/Currency?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Currency(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Currency(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Currency() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Currency(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Currency(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Currency(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns CurrencyPortType
     */
    @WebEndpoint(name = "CurrencySOAP11port_http")
    public CurrencyPortType getCurrencySOAP11PortHttp() {
        return super.getPort(CurrencySOAP11PortHttp, CurrencyPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyPortType
     */
    @WebEndpoint(name = "CurrencySOAP11port_http")
    public CurrencyPortType getCurrencySOAP11PortHttp(WebServiceFeature... features) {
        return super.getPort(CurrencySOAP11PortHttp, CurrencyPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CurrencyPortType
     */
    @WebEndpoint(name = "CurrencySOAP12port_http")
    public CurrencyPortType getCurrencySOAP12PortHttp() {
        return super.getPort(CurrencySOAP12PortHttp, CurrencyPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyPortType
     */
    @WebEndpoint(name = "CurrencySOAP12port_http")
    public CurrencyPortType getCurrencySOAP12PortHttp(WebServiceFeature... features) {
        return super.getPort(CurrencySOAP12PortHttp, CurrencyPortType.class, features);
    }


    /**
     *
     * @return
     *     returns CurrencyPortType
     */
    @WebEndpoint(name = "CurrencyHttpport")
    public CurrencyPortType getCurrencyHttpport() {
        return super.getPort(CurrencyHttpport, CurrencyPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CurrencyPortType
     */
    @WebEndpoint(name = "CurrencyHttpport")
    public CurrencyPortType getCurrencyHttpport(WebServiceFeature... features) {
        return super.getPort(CurrencyHttpport, CurrencyPortType.class, features);
    }

}
